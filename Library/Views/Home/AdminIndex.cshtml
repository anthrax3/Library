@{
    ViewBag.Title = "Home Page";
}
@using Microsoft.AspNet.Identity;
<h2>Books in our library</h2>
<container class='col-md-6'>
<div class="form-group">
  <label for="newBookTitle">Title:</label>
  <input type="text" class="form-control" id="newBookTitle">
</div>
<div class="form-group">
  <label for="newBookAuthors">Authors, please separate with commas:</label>
  <input type="text" class="form-control" id="newBookAuthors">
</div>
<div class="form-group">
  <label for="newBookQuantity">Quantity:</label>
  <input type="number" min="0" class="form-control" id="newBookQuantity">
</div>
<p id="notEnughDataDataText"></p>
</container>
<container class='col-md-6'>
<div class="form-group">
  <label for="newBookDescription">Description:</label>
  <textarea class="form-control" rows="9" id="newBookDescription"></textarea>
</div>
</container>

<container class='col-md-6'>
	<button type="button" class="btn btn-success" id = "addNewBook">Add a book</button>
</container>

<div>
	<container class='col-md-2'>
			<div class="dropdown">
				<button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">Sort by
				<span class="caret"></span></button>
				<ul class="dropdown-menu">
					<li><a href="#bookTable" id="sortTitle">Title</a></li>
					<li><a href="#bookTable" id="sortAuthors">Authors</a></li>
				</ul>
			</div>
	</container>
	<container class='col-md-2'>
			<div class="checkbox">
				<label><input id="onlyAvailableMeCheckbox" type="checkbox" value="">Only available</label>
			</div>
	</container>
	<container class='col-md-2'>
			<div class="checkbox">
				<label><input id="takenByMeCheckbox" type="checkbox" value="">Taken by me</label>
			</div>
	</container>
</div>

<table id = "bookTable" class="table table-hover">
    <thead>
        <tr>
            <th>Title</th>
            <th>Authors</th>
            <th>Left in stock</th>
            <th>Take book</th>
            <th>Delete book</th>
			<th>Change quantity</th>
        </tr>
    </thead>
</table>

<nav class="text-center">
    <ul class="pagination">
        <li class="pag_prev">
            <a href="#bookTable" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="pag_next">
            <a href="#bookTable" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>

@section scripts {
<script>
    var listOfBooks;
	var filteredListOfBooks;
	var notReturnedBooks;
	var bookIndex;
	pageSize = 8;
	var currentPage = 1;
    var uId = '@User.Identity.GetUserId()';
	
	function getBooks() {
		$.get("/api/books", function(data, status){
            window.listOfBooks = data;
			window.filteredListOfBooks = data;
			drawTable();
			drawPageNumbers();
        });
	}
	
	function getNotReturnedBooks() {
		$.get("/api/userhistory?userId=" + uId, function(data, status){
            notReturnedBooks = data;
			console.log(notReturnedBooks);
        });
	}

	function drawTable() {
		$('#bookTableBody').remove();
		$('#bookTable').append('<tbody id = "bookTableBody">');

		for(i = 0+(currentPage-1)*pageSize; i < (pageSize+(currentPage-1)*pageSize)  && i < filteredListOfBooks.length; i++){
			var tempButtonString;
			if (jQuery.inArray(filteredListOfBooks[i].id, notReturnedBooks) != -1) {
				tempButtonString = '<td><button type="button" class="btn btn-warning js-return"' + 'data-book-index = "' + i + '" data-book-id = "' + filteredListOfBooks[i].id + '">Return book</button>' +'</td>';
			}
			else {
				tempButtonString = '<td><button type="button" class="btn btn-success js-take"' + 'data-book-index = "' + i + '" data-book-id = "' + filteredListOfBooks[i].id + '">Take book</button>' +'</td>';
			}
            $('#bookTable').append('<tr><td><a href = "/books/getbook/' + filteredListOfBooks[i].id + '"><div>' + filteredListOfBooks[i].title +'</div></a></td>' +
                                    '<td>' + filteredListOfBooks[i].authors +'</td>' +
                                    '<td>' + filteredListOfBooks[i].leftInStock + '</td>' +
                                     tempButtonString +
                                    '<td><button type="button" class="btn btn-danger js-delete"' + 'data-book-index = "' + i + '" data-book-id = "' + filteredListOfBooks[i].id + '">Detele</button>' +'</td>' +
									'<td><button type="button" class="btn btn-warning js-change"' + 'data-book-index = "' + i + '" data-book-id = "' + filteredListOfBooks[i].id + '">Change quantity</button>' +'</td></tr>');
		}

		$('#bookTable').append(  '</tbody>' );
	}
	
	function drawPageNumbers() {
		pagesCount = filteredListOfBooks.length;
		var nav = '';
		var totalPages = Math.ceil(pagesCount / pageSize);
		$( "li.numeros" ).each(function() {
			$( this ).remove();
		});
		
		for (var s=0; s<totalPages; s++){
			nav += '<li class="numeros"><a href="#bookTable">'+(s+1)+'</a></li>';
		}
		$(".pag_prev").after(nav);
		$(".numeros").first().addClass("active");
		
		//change page
		$(".pagination li.numeros").click(function() {
			$(".pagination li").removeClass("active");
			$(this).addClass("active");
			currentPage = parseInt($(this).text());
			drawTable();
		});

		$(".pagination li.pag_prev").click(function() {
			if($(this).next().is('.active')) return;
			$('.numeros.active').removeClass('active').prev().addClass('active');
			currentPage = currentPage > 1 ? (currentPage-1) : 1;
			drawTable();
		});

		$(".pagination li.pag_next").click(function() {
			if($(this).prev().is('.active')) return;
			$('.numeros.active').removeClass('active').next().addClass('active');
			currentPage = currentPage < totalPages ? (currentPage+1) : totalPages;
			drawTable();
		});
	}

    $(document).ready(function () {
		getNotReturnedBooks();
        getBooks();

		$('#bookTable').on('click', '.js-change', function() {
			var newQuantity=prompt("Set new quantity for the book");
			if (newQuantity!=null && newQuantity!="") {
				bookIndex = $(this).attr('data-book-index');
				$.ajax({
					url: 'api/books/',
					method: 'PUT',
					contentType: 'application/json',
					data: JSON.stringify({
							id: $(this).attr('data-book-id'),
							leftInStock: newQuantity,
					}),
					success: function() {
						listOfBooks[bookIndex].leftInStock = newQuantity;
						drawTable();
						drawPageNumbers();
					}
				});
			};
		});

		$('#bookTable').on('click', '.js-delete', function() {
			if (confirm('Are you sure you want to delete this book?')) {
				bookIndex = $(this).attr('data-book-index');
				$.ajax({
					url: 'api/books/' + $(this).attr('data-book-id'),
					method: 'DELETE',
					success: function() {
						listOfBooks.splice(bookIndex, 1);
						drawTable();
						drawPageNumbers();
					}
				});
			};
		});

		$("#addNewBook").click(function(){
			var tempTitle = $.trim($('#newBookTitle').val());
			var tempQuantity = $('#newBookQuantity').val();

			if (tempTitle === "") {
				$('#notEnughDataDataText').text('Please, write a title for the book.');
				return;
			}
			if (tempQuantity === "") {
				$('#notEnughDataDataText').text('Please, set the quantity.');
				return;
			}

			$('#notEnughDataDataText').text('');

			var tempAuthors = $('#newBookAuthors').val();
			var tempDescription = $('#newBookDescription').val();

			$.post("/api/books",
			{
				title: tempTitle,
				authors: tempAuthors,
				description: tempDescription,
				leftInStock: tempQuantity,
			},
			function(data){
				if (data > 0) {
					var tempBook = {id: data,
								title: tempTitle,
								authors: tempAuthors,
								description: tempDescription,
								leftInStock: tempQuantity,};
					listOfBooks.push(tempBook);
					drawTable();
					drawPageNumbers();
				}
			});
		});

		$('#bookTable').on('click', '.js-take', function() {
			bookIndexTake = $(this).attr('data-book-index');
			bookIdTake = $(this).attr('data-book-id');
			$.post("/api/transaction",
			{
				bookId: bookIdTake,
				userId: uId,
			},
			function(data){
				if (data) {
					listOfBooks[bookIndexTake].leftInStock -= 1;
					notReturnedBooks.push(parseInt(bookIdTake));
					console.log(notReturnedBooks);
					drawTable();
					drawPageNumbers();
				}
			});
		});
		
		$('#bookTable').on('click', '.js-return', function() {
			bookIndexReturn = $(this).attr('data-book-index');
			bookIdReturn = $(this).attr('data-book-id');
			$.ajax({
				url: 'api/transaction/',
				method: 'PUT',
				contentType: 'application/json',
				data: JSON.stringify({
						id: -1,
						bookId: bookIdReturn,
						userId: uId,
				}),
				success: function() {
					listOfBooks[bookIndexReturn].leftInStock += 1;
					tempIndex = notReturnedBooks.indexOf(parseInt(bookIdReturn));
					if (tempIndex > -1) {
						notReturnedBooks.splice(tempIndex, 1);
					}
					console.log(bookIdReturn);
					console.log(tempIndex);
					console.log(notReturnedBooks);
					drawTable();
					drawPageNumbers();
				}
			});
		});
		
		function SortByTitleAsc(a, b){
			var aName = a.title.toLowerCase();
			var bName = b.title.toLowerCase(); 
			return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
		}
		function SortByTitleDesc(a, b){
			var aName = a.title.toLowerCase();
			var bName = b.title.toLowerCase(); 
			return ((aName > bName) ? -1 : ((aName < bName) ? 1 : 0));
		}
		
		$('#sortTitle').on('click', function() {
			var direction;
			if (!window.sortTAsc) {
				window.sortTAsc = true;
				window.listOfBooks.sort(SortByTitleAsc);
			}
			else {
				window.sortTAsc = false;
				window.listOfBooks.sort(SortByTitleDesc);
			}
			
			drawTable();
		});
		
		function SortByAuthorsAsc(a, b){
			var aName = a.authors.toLowerCase();
			var bName = b.authors.toLowerCase(); 
			return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
		}
		function SortByAuthorsDesc(a, b){
			var aName = a.authors.toLowerCase();
			var bName = b.authors.toLowerCase(); 
			return ((aName > bName) ? -1 : ((aName < bName) ? 1 : 0));
		}
		
		$('#sortAuthors').on('click', function() {
			var direction;
			if (!window.sortAAsc) {
				window.sortAAsc = true;
				window.listOfBooks.sort(SortByAuthorsAsc);
			}
			else {
				window.sortAAsc = false;
				window.listOfBooks.sort(SortByAuthorsDesc);
			}
			
			drawTable();
		});
		
		function filterListOfBooks() {
		if (!($('#onlyAvailableMeCheckbox').is(":checked")) && !($('#takenByMeCheckbox').is(":checked"))) {
			window.filteredListOfBooks = window.listOfBooks;
			return true;
		}
		
		window.filteredListOfBooks=[];
		for (var i = 0; i < window.listOfBooks.length; i++) {
			if ($('#onlyAvailableMeCheckbox').is(":checked") && window.listOfBooks[i].leftInStock < 1)
				continue;
			
			if ($('#takenByMeCheckbox').is(":checked") && (jQuery.inArray(window.listOfBooks[i].id, notReturnedBooks) == -1))
				continue;
			
			filteredListOfBooks.push(window.listOfBooks[i]);
			}
		return true;
		}
		
		$('#onlyAvailableMeCheckbox').on('click', function() {
			filterListOfBooks();
			drawTable();
			drawPageNumbers();
		});
		$('#takenByMeCheckbox').on('click', function() {
			filterListOfBooks();
			drawTable();
			drawPageNumbers();
		});
	});
</script>
}
